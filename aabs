#!/usr/bin/php
<?php

    define('AABS_START_TIME', time());

    $options = getopt("SUd::r::", array( "skip-sync", "skip-upload", "devices::", "roms::" ));
    foreach ($options as $key => $value) {
        switch ($key) {
            case "S":
            case "skip-sync":
                define("AABS_SKIP_SYNC", true);
                break;

            case "U":
            case "skip-upload":
                define("AABS_SKIP_UPLOAD", true);
                break;

            case "d":
            case "devices":
                define("AABS_DEVICES", $value . " ");
                break;

            case "r":
            case "roms":
                define("AABS_ROMS", $value . " ");
                break;
        }
    }

    if (is_file(dirname($argv[0]) . "/../aabs.config.php"))
        include dirname($argv[0]) . "/../aabs.config.php";

    include dirname($argv[0]) . "/aabs.config.php";

    if (!defined("AABS_SKIP_SYNC"))
        define("AABS_SKIP_SYNC", false);

    if (!defined("AABS_SKIP_UPLOAD"))
        define("AABS_SKIP_UPLOAD", false);

    if (!defined("AABS_DEVICES"))
        define("AABS_DEVICES", "*");

    if (!defined("AABS_ROMS"))
        define("AABS_ROMS", "*");

    if (is_file(dirname($argv[0]) . "/../aabs.build.php"))
        include dirname($argv[0]) . "/../aabs.build.php";
    else
        include dirname($argv[0]) . "/aabs.build.php";

    function aabs_sync($rom) {
        // check if sync is disabled
        if (AABS_SKIP_SYNC) {
            return;
        }

        // check if ROM is disabled
        if (AABS_ROMS != "*" && strpos(AABS_ROMS, "{$rom} ") === false) {
            return;
        }

        // check if ROM is supported
        __validate_rom($rom);

		$__assert  = "";
		$__assert .= 'ret=$?' . "\n";
		$__assert .= 'if [ ! $ret -eq 0 ]; then' . "\n";
		$__assert .= "\t" . 'exit $ret' . "\n";
		$__assert .= 'fi' . "\n";
		$__assert .= "\n";
		
		$command  = "";
		$command .= '#!/bin/bash' . "\n";
		$command .= "\n";
		$command .= 'cd "' . AABS_SOURCE_BASEDIR . "/{$rom}" . '"' . "\n" . $__assert;
		$command .= "\n";
		$command .= 'repo sync -c -d --force-sync --no-clone-bundle --jobs=' . AABS_SYNC_JOBS . "\n" . $__assert;
		$command .= "\n";

		__exec($command);
    }

    function aabs_build($rom, $device_prefix, $main_device, $targets_combinations) {
        // check if ROM is disabled
        if (AABS_ROMS != "*" && strpos(AABS_ROMS, "{$rom} ") === false) {
            return;
        }

        // check if device is disabled
        if (AABS_DEVICES != "*" && strpos(AABS_DEVICES, "{$device} ") === false) {
            return;
        }

        // check if ROM is supported
        __validate_rom($rom);

        $output_match_path = "out/target/product/{$main_device}/" . __get_output_match($rom, $main_device);

		$__assert  = "";
		$__assert .= 'ret=$?' . "\n";
		$__assert .= 'if [ ! $ret -eq 0 ]; then' . "\n";
		$__assert .= "\t" . 'exit $ret' . "\n";
		$__assert .= 'fi' . "\n";
		$__assert .= "\n";
		
		$command  = "";
		$command .= '#!/bin/bash' . "\n";
		$command .= "\n";
		$command .= 'cd "' . AABS_SOURCE_BASEDIR . "/{$rom}" . '"' . "\n" . $__assert;
		$command .= "\n";
		$command .= 'rm -fv ' . $output_match_path . "\n" . $__assert;
		$command .= 'rm -fv ' . $output_match_path . '.bak' . "\n" . $__assert;
		$command .= "\n";
		$command .= 'export RR_BUILDTYPE=Unofficial' . "\n";
		$command .= 'export WITH_ROOT_METHOD="magisk"' . "\n";
		$command .= "\n";
		$command .= 'source build/envsetup.sh' . "\n";
		$command .= "\n";
		$command .= 'rm -fv "' . $output_match_path . '"' . "\n" . $__assert;
		$command .= 'rm -fv "' . $output_match_path . '.bak"' . "\n" . $__assert;
		$command .= "\n";

		foreach($targets_combinations as $device => $cmd) {
			// check if device is disabled
			if (AABS_DEVICES != "*" && strpos(AABS_DEVICES, "{$device} ") === false) {
				continue;
			}

			$targets = isset($cmd['targets']) ? $cmd['targets'] : "bacon";
			$clobber = isset($cmd['clobber']) ? $cmd['clobber'] : false;
			$jobs = isset($cmd['jobs']) ? $cmd['jobs'] : AABS_BUILD_JOBS;

			$command .= 'lunch ' . $device_prefix . '_' . $device . '-userdebug' . "\n" . $__assert;
			
			if ($clobber) {
				$command .= 'make clobber -j' . $jobs . "\n" . $__assert;
			}
			
			$command .= 'make ' . $targets . ' -j' . $jobs . "\n" . $__assert;
			$command .= "\n";
		}
		
		__exec($command);
	}

    function aabs_patch($rom, $device, $targets = array( )) {
        if (is_array($device)) {
            $device_aliases = $device;
            $device = $device[0];
        }

        // check if ROM is disabled
        if (AABS_ROMS != "*" && strpos(AABS_ROMS, "{$rom} ") === false) {
            return;
        }

        // check if device is disabled
        if (AABS_DEVICES != "*" && strpos(AABS_DEVICES, "{$device} ") === false) {
            return;
        }

        // check if ROM is supported
        __validate_rom($rom);

        $source_dir  = AABS_SOURCE_BASEDIR . "/{$rom}";
        $output_dir  = "{$source_dir}/out/target/product/{$device}";
        $output_name = trim(shell_exec("/bin/bash -c \"basename $output_dir/" . __get_output_match($rom, $device) . "\""), "\n\t");
        $output_path = "{$output_dir}/{$output_name}";
        $tmp         = tempnam(sys_get_temp_dir(), 'aabs-patch-');

        if (is_file("$tmp"))
            unlink("$tmp");

        __mkdir("{$tmp}/");
        __mkdir("{$tmp}/patches/");

        __exec("unzip \"{$output_path}\" -d \"{$tmp}/\"");

        $script_targets = array( );
        foreach ($targets as $target_device => $target_options) {
            // check if device is disabled
            if (AABS_DEVICES != "*" && strpos(AABS_DEVICES, "{$device} ") === false) {
                continue;
            }

            $target_out_dir   = "{$source_dir}/out/target/product/{$target_device}";
            $target_patch_dir = "{$tmp}/patches/{$target_device}";

            if (!isset($script_targets[$target_device])) {
                $script_targets[$target_device] = array(
                    'boot'   => false,
                    'system' => false
                );
            }

            __mkdir("{$target_patch_dir}");

            foreach ($target_options['files'] as $target_file) {
                if (is_array($target_file)) {
                    $target_file_src = "{$source_dir}/{$target_file[0]}";
                    $target_file_dst = "{$target_patch_dir}/{$target_file[1]}";
                } else {
                    $target_file_src = "{$target_out_dir}/{$target_file}";
                    $target_file_dst = "{$target_patch_dir}/{$target_file}";
                }

                if ($target_file_dst == "{$target_patch_dir}/boot.img")
                    $script_targets[$target_device]['boot'] = true;

                if (strpos($target_file_dst, "{$target_patch_dir}/system/") === 0)
                    $script_targets[$target_device]['system'] = true;

                $target_file_dirname = dirname($target_file_dst);

                __mkdir("{$target_file_dirname}");
                __exec("cp -f {$target_file_src} {$target_file_dst}");
            }
        }

        $updater_script_path   = "{$tmp}/META-INF/com/google/android/updater-script";
        $updater_script        = file_get_contents($updater_script_path);

        $updater_script_asserts        = "";
        $updater_script_boot_asserts   = "";
        $updater_script_boot           = "";
        $updater_script_system_asserts = "";
        $updater_script_system         = "";

        $updater_device_assert = "getprop(\"ro.product.device\") == \"%%\" || getprop(\"ro.build.product\") == \"%%\" || ";

        if (preg_match("/package_extract_file\(\"boot.img\", \"([^\"]*)\"\);/", $updater_script, $boot_device_match) == 0) {
            die("Failed to get path of BOOT block-device\n");
        }

        foreach ($script_targets as $target => $flags) {
            if ($flags['boot']) {
                $target_device_asserts = str_replace("%%", $target, $updater_device_assert);
                foreach ($targets[$target]['alias'] as $alias) {
                    $target_device_asserts .= str_replace("%%", $alias, $updater_device_assert);
                }

                $target_device_asserts        = substr($target_device_asserts, 0, strlen($target_device_asserts) - 4);
                $updater_script_boot_asserts .= $target_device_asserts . ' || ';

                $updater_script_boot .= "if {$target_device_asserts} then\n";
                $updater_script_boot .=     "ui_print(\"[AABS] Injecting kernel for {$target}\");\n";
                $updater_script_boot .=     "package_extract_file(\"patches/{$target}/boot.img\", \"{$boot_device_match[1]}\");\n";
                $updater_script_boot .= "endif;\n";
            }

            if ($flags['system']) {
                $target_device_asserts = str_replace("%%", $target, $updater_device_assert);
                foreach ($targets[$target]['alias'] as $alias) {
                    $target_device_asserts .= str_replace("%%", $alias, $updater_device_assert);
                }

                $target_device_asserts          = substr($target_device_asserts, 0, strlen($target_device_asserts) - 4);
                $updater_script_system_asserts .= $target_device_asserts . ' || ';

                $updater_script_system .= "if {$target_device_asserts} then\n";
                $updater_script_system .=     "ui_print(\"[AABS] Injecting /system for {$target}\");\n";
                $updater_script_system .=     "package_extract_dir(\"patches/{$target}/system\", \"/system\");\n";
                $updater_script_system .= "endif;\n";
            }

            $updater_script_asserts .= $target_device_asserts . ' || ';
        }

        if ($updater_script_boot_asserts != "") {
            $boot_flash_command = substr($boot_device_match[0], 0, strlen($boot_device_match[0]) - 1);
            $updater_script_boot_asserts = substr($updater_script_boot_asserts, 0, strlen($updater_script_boot_asserts) - 4);

            $updater_script_boot .= "if !({$updater_script_boot_asserts}) then\n";
            $updater_script_boot .=     "ui_print(\"[AABS] Injecting default kernel\");\n";
            $updater_script_boot .=     "{$boot_flash_command}\n";
            $updater_script_boot .= "endif;\n";

            $updater_script = str_replace($boot_device_match[0], $updater_script_boot, $updater_script);
        }

        if ($updater_script_system_asserts != "") {
            $system_unmount_pos = strrpos($updater_script, "unmount(\"/system\");");
            $updater_script_system_asserts = substr($updater_script_system_asserts, 0, strlen($updater_script_system_asserts) - 4);

            $updater_script =
                substr($updater_script, 0, $system_unmount_pos) .
                $updater_script_system . "\n" .
                "if !({$updater_script_system_asserts}) then\n" .
                    "ui_print(\"[AABS] No need to inject /system\");\n" .
                "endif;\n" .
                substr($updater_script, $system_unmount_pos, strlen($updater_script) - $system_unmount_pos);
        }

        foreach ($device_aliases as $device_alias) {
            $updater_script_asserts = str_replace("%%", $device_alias, $updater_device_assert) . $updater_script_asserts;
        }

        $updater_script_asserts = substr($updater_script_asserts, 0, strlen($updater_script_asserts) - 4);

        $updater_script_assert_line = strpos($updater_script, "\n");
        $updater_script = substr($updater_script, $updater_script_assert_line);

        $updater_script =
            "if !({$updater_script_asserts}) then\n" .
                "ui_print(\"\");\n" .
                "ui_print(\"\");\n" .
                "ui_print(\" *****************************************\");\n" .
                "ui_print(\" **                                     **\");\n" .
                "ui_print(\" **    SORRY, BUT THIS BUILD DOESN'T    **\");\n" .
                "ui_print(\" **         SUPPORT YOUR DEVICE         **\");\n" .
                "ui_print(\" **                                     **\");\n" .
                "ui_print(\" *****************************************\");\n" .
                "ui_print(\"\");\n" .
                "ui_print(\"\");\n" .
            "endif;\n" .
            "assert({$updater_script_asserts});\n" .
            "ui_print(\" \");\n" .
            "ui_print(\" \");\n" .
            "ui_print(\" Prepared and patched with    \");\n" .
            "ui_print(\" \");\n" .
            "ui_print(\"  _______ _______ ______   ______\");\n" .
            "ui_print(\" (_______|_______|____  \ / _____)\");\n" .
            "ui_print(\"  _______ _______ ____)  | (____\");\n" .
            "ui_print(\" |  ___  |  ___  |  __  ( \____ \\\\\");\n" .
            "ui_print(\" | |   | | |   | | |__)  )_____) )\");\n" .
            "ui_print(\" |_|   |_|_|   |_|______/(______/\");\n" .
            "ui_print(\" \");\n" .
            "ui_print(\" https://github.com/TeamNexus/aabs\");\n" .
            "ui_print(\" \");\n" .
            "ui_print(\" \");\n" .
            "ui_print(\" *********************************\");\n" .
            "ui_print(\" ROM-Name:      {$rom}\");\n" .
            "ui_print(\" Base-Device:   {$device}\");\n" .
            "ui_print(\" Timestamp:     " . date("Y-m-d H:i:s", AABS_START_TIME) . "\");\n" .
            "ui_print(\" *********************************\");\n" .
            "ui_print(\" \");\n" .
            $updater_script;

        file_put_contents($updater_script_path, $updater_script);

        __exec("mv {$output_path} {$output_path}.bak");
        __exec("cd {$tmp} && zip -r9 {$output_path} .");
        __exec("rm -rfv {$tmp}");
    }

    function aabs_upload($rom, $short_device, $device) {
        // check if uploading is disabled
        if (AABS_SKIP_UPLOAD) {
            return;
        }

        // check if ROM is supported
        __validate_rom($rom);

        // check if ROM is disabled
        if (AABS_ROMS != "*" && strpos(AABS_ROMS, "{$rom} ") === false) {
            return;
        }

        // check if device is disabled
        if (AABS_DEVICES != "*" && strpos(AABS_DEVICES, "{$device} ") === false) {
            return;
        }

        $source_dir     = AABS_SOURCE_BASEDIR . "/{$rom}";
        $output_dir     = "{$source_dir}/out/target/product/{$device}";
        $output_name    = trim(shell_exec("/bin/bash -c \"basename $output_dir/" . __get_output_match($rom, $device) . "\""), "\n\t");
        $output_path    = "{$output_dir}/{$output_name}";

        $upload_dir     = AABS_UPLOAD_DIR;
        $upload_dir_len = strlen($upload_dir);
        for ($i = 0; $i < $upload_dir_len; $i++) {
            if ($upload_dir[$i] == '%' && $i + 1 < $upload_dir_len) {
                $upload_dir = str_replace($upload_dir[$i] . $upload_dir[$i + 1], date($upload_dir[$i + 1], AABS_START_TIME), $upload_dir);
                $upload_dir_len = strlen($upload_dir);
            }
        }
        $upload_dir = str_replace("{ROM}", $rom, $upload_dir);
        $upload_dir = str_replace("{DEVICE}", $device, $upload_dir);
        $upload_dir = str_replace("{SHORT_DEVICE}", $short_device, $upload_dir);

        $upload_file     = AABS_UPLOAD_FILE;
        $upload_file_len = strlen($upload_file);
        for ($i = 0; $i < $upload_file_len; $i++) {
            if ($upload_file[$i] == '%' && $i + 1 < $upload_file_len) {
                $upload_file = str_replace($upload_file[$i] . $upload_file[$i + 1], date($upload_file[$i + 1], AABS_START_TIME), $upload_file);
                $upload_file_len = strlen($upload_file);
            }
        }
        $upload_file = str_replace("{ROM}", $rom, $upload_file);
        $upload_file = str_replace("{DEVICE}", $device, $upload_file);
        $upload_file = str_replace("{SHORT_DEVICE}", $short_device, $upload_file);

        echo "\n";
        echo "\n";

        switch (AABS_UPLOAD_TYPE) {
            case "sftp":

                echo "Connecting to " . AABS_UPLOAD_HOST . ":" . AABS_UPLOAD_PORT . "...\n";
                if (!$ssh_conn = ssh2_connect(AABS_UPLOAD_HOST, AABS_UPLOAD_PORT))
                    die("aabs_upload: failed to establish connection to " . AABS_UPLOAD_HOST . ":" . AABS_UPLOAD_PORT);

                echo "Authenicating...\n";
                if (!ssh2_auth_password($ssh_conn, AABS_UPLOAD_USER, AABS_UPLOAD_PASS))
                    die("aabs_upload: failed to login to " . AABS_UPLOAD_HOST . ":" . AABS_UPLOAD_PORT . " (Using password: " . (AABS_UPLOAD_PASS == "" ? "no" : "yes") . ")");

                echo "Creating SFTP-session...\n";
                if (!$sftp_conn = ssh2_sftp($connection))
                    die("aabs_upload: failed to create a SFTP-session");

                echo "Creating upload-directory...\n";
                if (!ssh2_exec($ssh_conn, "mkdir -p \"{$upload_dir}\""))
                    die("aabs_upload: failed to create upload-directory");

                $remote_stream = @fopen("ssh2.sftp://$sftp_conn$upload_dir/.$upload_file", 'w');
                $local_stream  = @fopen($output_path, 'r');

                if (!flock($local_stream, LOCK_SH))
                    die("aabs_upload: failed to acquire lock for local file");

                $total   = filesize($output_path);
                $current = 0;

                echo "\rUploading {$current} / {$total}...";

                while(!feof($local_stream)) {
                    $buffer = fread($local_stream, 8192);
                    fwrite($remote_stream, $buffer, strlen($buffer));

                    $current += strlen($buffer);
                    echo "\rUploading {$current} / {$total}...";
                }
                fflush($remote_stream);

                fclose($remote_stream);
                fclose($local_stream);

                echo "Make build visible...\n";
                if (!ssh2_exec($ssh_conn, "mv \"$upload_dir/.$upload_file\" \"$upload_dir/$upload_file\""))
                    die("aabs_upload: failed to rename uploaded build-file");

                echo "\nFinished!";
                break;

            case "ftp":

                echo "Connecting to " . AABS_UPLOAD_HOST . ":" . AABS_UPLOAD_PORT . "...\n";
                if (!$ftp_conn = ftp_ssl_connect(AABS_UPLOAD_HOST, AABS_UPLOAD_PORT))
                    die("aabs_upload: failed to establish connection to " . AABS_UPLOAD_HOST . ":" . AABS_UPLOAD_PORT);

                echo "Authenicating...\n";
                if (!ftp_login($ftp_conn, AABS_UPLOAD_USER, AABS_UPLOAD_PASS))
                    die("aabs_upload: failed to login to " . AABS_UPLOAD_HOST . ":" . AABS_UPLOAD_PORT . " (Using password: " . (AABS_UPLOAD_PASS == "" ? "no" : "yes") . ")");

                echo "Switching to passive-mode...\n";
                if (!ftp_pasv($ftp_conn, true))
                    die("aabs_upload: failed to switch to passive-mode");

                echo "Creating upload-directory...\n";
                if (!ftp_mksubdirs($ftp_conn, "/", $upload_dir))
                    die("aabs_upload: failed to create upload-directory \"${upload_dir}\"");

                echo "Uploading...\n";
                if (!ftp_put($ftp_conn, "${upload_dir}/.${upload_file}", $output_path, FTP_BINARY))
                    die("aabs_upload: failed to upload build to \"${upload_dir}/.${upload_file}\"");

                echo "Make build visible...\n";
                if (!ftp_rename($ftp_conn, "$upload_dir/.$upload_file", "$upload_dir/$upload_file"))
                    die("aabs_upload: failed to rename uploaded build-file");

                echo "\nFinished!";
                break;
        }

        echo "\n";
        echo "\n";
    }

    function __mkdir($name) {
        if(!is_dir($name))
            __exec("mkdir -p {$name}");
    }

    function __exec($cmdline, $censoring = array( )) {
        $output   = array( );
        $rc       = 0;
        $dcmdline = $cmdline;
		
		if (strpos($cmdline, "\n") !== false) {
			$tempfile = tempnam(sys_get_temp_dir(), "aabs-exec-");
			file_put_contents($tempfile, $cmdline);
			chmod($tempfile, 0777);
			$dcmdline = $cmdline = "/bin/bash -c {$tempfile}";
		} else {
			foreach($censoring as $censor) {
				$dcmdline = str_replace($censor, "***", $dcmdline);
			}
		}

		echo "{$dcmdline}\n";
        system("{$cmdline}", $rc);

        if ($rc != 0) {
            die("Previous command failed with {$rc}\n");
        }
    }
    
    function __validate_rom($rom) {
        switch ($rom) {
            case "NexusOS":
            case "LineageOS":
            case "ResurrectionRemix":
            case "AOKP":
                return;
        }

        throw new Exception("Unsupported ROM: {$rom} (Supported: LineageOS, NexusOS, ResurrectionRemix, AOKP)");
    }
    
    function __get_output_match($rom, $device) {
        __validate_rom($rom);
        
        switch ($rom) {
            case "LineageOS":
            case "NexusOS":
            case "ResurrectionRemix":
                return "lineage_${device}-ota-*.zip";
            case "AOKP":
                return "aokp_${device}-ota-*.zip";
        }
    }
	
	// http://php.net/manual/en/function.ftp-mkdir.php#112399
	function ftp_mksubdirs($ftpcon, $ftpbasedir, $ftpath) {
		@ftp_chdir($ftpcon, $ftpbasedir);
		$parts = explode('/', $ftpath);
		foreach($parts as $part) {
			if(!@ftp_chdir($ftpcon, $part)) {
				@ftp_mkdir($ftpcon, $part);
				@ftp_chdir($ftpcon, $part);
			}
		}
		return true;
	}
