#!/bin/bash

#
# Automated Android Build Script - Simple and automated Android Build-Script
# Copyright (C) 2017  Lukas Berger
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# set global indicator variable
AABS=1
AABS_BASEDIR=$(dirname $0)

# include libs
. $AABS_BASEDIR/../lib/build.sh
. $AABS_BASEDIR/../lib/commands.sh
. $AABS_BASEDIR/../lib/list.sh
. $AABS_BASEDIR/../lib/variables.sh

# startup
function aabs_main {
	file=$1
	requested_category=$2

	if [ ! -f $file ]; then
		exit 1
	fi

	# prepare environment
	export AABS_BIN_REPO=$(mktemp "${TMPDIR:-/tmp/}repo-XXXXXXXXXXXX")
	curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > $AABS_BIN_REPO
	chmod +x $AABS_BIN_REPO

	# parse the project list
	aabs_parse_list $file project_list

	for rproject in "${project_list[@]}"; do

		project=( $rproject )

		aabs_parse_variable ${project[0]} ${project[1]}
		ret=$?

		if [ $ret -eq 1 ]; then
			# no build-action, so continue
			continue
		fi

		# check for the correct category
		if [ "$requested_category" != "*" ] && [ "$category" != "$requested_category" ]; then
			continue
		fi

		if [ "${project[0]:0:1}" != "@" ]; then
			# [0] category
			# [1] codename
			# [2] model
			# [3] rom-name
			# [4] rom-source
			# [5] lunch-combo
			# [6] output-expr
			# [7] upload-path
			# [8] clobber
			# [9] concr-jobs

			# prepare build-variables
			aabs_get_value "category"    ${project[0]}
			aabs_get_value "codename"    ${project[1]}
			aabs_get_value "model"       ${project[2]}
			aabs_get_value "rom-name"    ${project[3]}
			aabs_get_value "rom-source"  ${project[4]}
			aabs_get_value "lunch-combo" ${project[5]}
			aabs_get_value "output-expr" ${project[6]}
			aabs_get_value "upload-path" ${project[7]}
			aabs_get_value "clobber"     ${project[8]}
			aabs_get_value "concr-jobs"  ${project[9]}

			export __date=$(date +%Y-%m-%d)
			export __time=$(date +%H%M)
		fi

		# expand variables: lunch-combo
		aabs_expand_variable "lunch-combo" "codename"
		aabs_expand_variable "lunch-combo" "model"
		aabs_expand_variable "lunch-combo" "rom-name"

		# expand variables: upload-path
		aabs_expand_variable "upload-path" "codename"
		aabs_expand_variable "upload-path" "model"
		aabs_expand_variable "upload-path" "rom-name"
		aabs_expand_variable "upload-path" "date"
		aabs_expand_variable "upload-path" "time"

		# expand variables: rom-source
		aabs_expand_variable "rom-source" "codename"
		aabs_expand_variable "rom-source" "model"
		aabs_expand_variable "rom-source" "rom-name"

		# expand variables: category
		aabs_expand_variable "category" "codename"
		aabs_expand_variable "category" "model"
		aabs_expand_variable "category" "rom-name"

		# check for command
		if [ "${project[0]:0:1}" == "@" ]; then
			# parse command
			command_parse "$rproject"

			# run command, only allow specific ones
			case "${aabs_command}" in
				"git") command_run_git ;;
				"repo") command_run_repo ;;
			esac
		else
			# start build
			start_build
		fi

	done

}

usage() { echo "Usage: $0 -c <Category> -f <Project-File>" 1>&2; exit 1; }

category="*"
project_file=""

while getopts ":c:f:" o; do
    case "${o}" in
        c) category=${OPTARG} ;;
        f) project_file=${OPTARG} ;;
        *) usage ;;
    esac
done

if [ "$category" == "" ]; then usage; fi
if [ "$project_file" == "" ]; then usage; fi

shift $((OPTIND-1))

aabs_main "$project_file" "$category"
