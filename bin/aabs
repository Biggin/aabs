#!/bin/bash

#
# Automated Android Build Script - Simple and automated Android Build-Script
# Copyright (C) 2017  Lukas Berger
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# set global indicator variable
AABS=1
AABS_BASEDIR=$(dirname $0)

# include libs
. $AABS_BASEDIR/../lib/utils.sh
. $AABS_BASEDIR/../lib/build.sh
. $AABS_BASEDIR/../lib/commands.sh
. $AABS_BASEDIR/../lib/list.sh
. $AABS_BASEDIR/../lib/variables.sh
. $AABS_BASEDIR/../lib/macros.sh

# startup
function aabs_main {
	local file=$1
	local requested_category=$2

	if [ ! -f $file ]; then
		exit 1
	fi

	# prepare environment
	export AABS_BIN_REPO=$(mktemp "${TMPDIR:-/tmp/}aabs-repo-XXXXXXXXXXXX")
	# curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > $AABS_BIN_REPO
	# __assert__ $?
	# chmod +x $AABS_BIN_REPO
	# __assert__ $?

	# parse the project list
	aabs_parse_list $file project_list

	for rproject in "${project_list[@]}"; do

		local project=( $rproject )

		aabs_parse_variable ${project[0]} ${project[1]}
		local ret=$?

		if [ $ret -eq 1 ]; then
			# was a variable, continue
			continue
		fi

		# check for the correct category
		if [ "$requested_category" != "*" ] && [ "$category" != "$requested_category" ]; then
			continue
		fi

		if  [ "${project[0]:0:1}" != "@" ] && \
			[ "${project[0]:0:1}" != "%" ] && \
			[ "${rproject:0:1}" != "$(echo -e "\t")" ] && \
			[ "${project[0]:0:1}" != ":" ]; then
			# Export only if it isn't some sort of command etc.
			aabs_export_default_variables
		fi

		aabs_expand_default_variables

		# check for any sorts of commands
		if [ "${rproject:0:1}" == "$(echo -e "\t")" ]; then
			# add the line to the macro
			macro_add_line "$rproject"
			__assert__ $?
		elif [ "${rproject:0:1}" == "@" ]; then
			# end macro-parsing
			macro_end_parse

			# parse command
			command_parse "$rproject"

			# run command, only allow specific ones
			case ${aabs_command} in
				# Internal commands
				post-build) command_run_post_build ;;

				# OS-commands
				repo) command_run_repo ;;
				*) command_run ${aabs_command} ;;
			esac
		elif [ "${rproject:0:1}" == "%" ]; then
			# start parsing macro
			macro_start_parse "$rproject"
		elif [ "${rproject:0:1}" == ":" ]; then
			# run the given macro
			macro_run "${project[0]:0:1}"
		else
			# end macro-parsing
			macro_end_parse

			# start build
			start_build
		fi

	done
}

usage() { echo "Usage: $0 -c <Category> -f <Project-File>" 1>&2; exit 1; }

category="*"
project_file=""

while getopts ":c:f:" o; do
	case "${o}" in
		c) category="${OPTARG}" ;;
		f) project_file="${OPTARG}" ;;
		*) usage ;;
	esac
done

if [ "$category" == "" ]; then usage; fi
if [ "$project_file" == "" ]; then usage; fi

shift $((OPTIND-1))

aabs_main "$project_file" "$category"
